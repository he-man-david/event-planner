// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("NX_DATABASE_URL")
  relationMode = "foreignKeys"
}

model Event {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String
  description   String   @default("")
  eventStart    DateTime
  eventEnd      DateTime
  createdBy     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  eventOptionId String?  @db.Uuid
  planned       Boolean  @default(false)

  members     EventMember[]
  options     EventOption[]
  creatorInfo User          @relation(fields: [createdBy], references: [id])

  @@index([updatedAt(sort: Desc), eventStart(sort: Desc)])
}

model EventOption {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title             String
  description       String?
  linkUrl           String
  linkPreviewTitle  String?
  linkPreviewImgUrl String?
  linkPreviewDesc   String?
  eventId           String   @db.Uuid
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  event           Event             @relation(fields: [eventId], references: [id])
  eventOptionVote EventOptionVote[]

  @@index([eventId, updatedAt(sort: Desc)])
  @@index([updatedAt(sort: Desc)])
}

model EventOptionVote {
  eventOptionId String   @db.Uuid
  userId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  eventOption EventOption @relation(fields: [eventOptionId], references: [id])

  @@id([eventOptionId, userId])
  @@index([updatedAt(sort: Desc)])
}

model EventComment {
  eventId   String   @db.Uuid
  createdBy String
  content   String
  id        String   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  commenterInfo User @relation(fields: [createdBy], references: [id])

  @@id([createdAt, eventId])
  @@index([updatedAt(sort: Desc)])
}

model EventMember {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  eventId   String   @db.Uuid
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event           Event             @relation(fields: [eventId], references: [id])
  memberInfo      User              @relation(fields: [userId], references: [id])

  @@index([eventId, userId, updatedAt(sort: Desc)])
}

model User {
  id            String         @id
  name          String
  email         String
  imageUrl      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  CreatedEvents Event[]
  EventMembers  EventMember[]
  EventComments EventComment[]
  EventOptionVotes EventOptionVote[]

  @@index([email, name, updatedAt(sort: Desc)])
}
